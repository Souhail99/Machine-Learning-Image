# -*- coding: utf-8 -*-
"""Machine Learning new version.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16578TprTfTyUSs_JExlQ_DsiqMP1JMkU

Nous allons ici commencer le projet. La case en dessous y'a tout les import. La première case est composé aussi de quelque pip pour l'installation de module qu'on a pas de base.
"""

# Commented out IPython magic to ensure Python compatibility.
#%matplotlib inline

#creer un fichier text pour installer les pip
#!sudo apt install tesseract-ocr
#!pip install pytesseract

#!pip install opencv-python

import time
import numpy as np
from math import *
import csv
import pandas as pd
import matplotlib.pyplot as plt
import pytesseract
import shutil
import os
import random
try:
 from PIL import Image
except ImportError:
 import Image
import glob
import cv2

from sklearn.model_selection import train_test_split

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Dropout, Conv2DTranspose, Input
from tensorflow.keras.callbacks import EarlyStopping

"""

Ici dans cette partie, on fait des essais sur des transformations d'images mais aussi on récupère la liste de toutes les images contenu dans le fichier (en excluant tout fichier qui ne soit pas un .png grâce à glob)
"""

#On récupère dans une liste toute notre base de donées d'images
Listedesimages = [f for f in glob.glob("*.png")]
print(Listedesimages)

#Ici essai sur une image sur la conversion en noir et blance
img = Image.open('/content/CNI2 - Copie.png')
imgGray = img.convert('L')
imgGray.save('/content/CNI2 - Copie_gray.png')
imgGray=Image.open('/content/CNI2 - Copie_gray.png')

#Ici essai sur une image sur rotation
Original_Image = Image.open("/content/CNI2 - Copie.png") 
rotated_image1 = Original_Image.rotate(180) 
rotated_image1.save('/content/CNI2 - Copie_180.png')

#On affiche la vrai image, l'enfant en noir et blanc et l'enfant avec une rotation
img.show() 
#imgGray.show() 
#rotated_image1.show()

"""Ici on fait notre classe qui s'appelle individu, individu correspond à un fichier image et donc une carte d'identité dans la base de données."""

def LireCSV():
    Patronymes=pd.read_csv("/content/patronymes.csv",sep=',')
    Prenom=pd.read_csv("/content/prenom.csv",sep=',')
    return Patronymes,Prenom

def Gray(img):
  image=Image.open(img)
  imagegray=image.convert('L')
  couleur='gray'
  l=img.split('.')
  imagegray.save(l[0]+couleur+l[1])
  lien=l[0]+couleur+l[1]
  return lien

def Rotation(img):
  image=Image.open(img)
  image180=image.rotate(180)
  rotation='rotation'
  l=img.split('.')
  image180.save(l[0]+rotation+l[1])
  lien=l[0]+rotation+l[1]
  return lien

class Individu:
  #Soit l'individu reste le meme soit il est modifié de manière aléatoire
    def __init__(self, a=None):
        pos=random.randint(0,len(Listedesimages)-1)
        self.a=Listedesimages[pos]
        change=random.randint(1,5)
        if change==1 or change==2:
          if change==1:
            self.a=Gray(self.a)
          if change==2:
            self.a=Rotation(self.a) 
    #On retourne le nom de l'image          
    def __str__(self):
        return str(f"L'image qui constitue cet individu est :{self.a}")
    #On affiche l'image
    def display(self):
        image=Image.open(self.a)
        return image.show()

"""On fait aussi quelques tests ici :"""

im = cv2.imread("/content/CNI3.png", cv2.IMREAD_COLOR)

im = cv2.bitwise_not(im)
plt.imshow(im)
plt.show()

image_path_in_colab="/content/CNI3.png"
extract = pytesseract.image_to_string(Image.open(image_path_in_colab))
print(extract)



def ocr_core(img):
  text=pytesseract.image_to_string(img)
  return text
#img=Image.open('/content/CNI2.png')
img=cv2.imread('/content/CNI3.png')

def get_grayscale(img):
  return cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

def remove_noise(img):
  return cv2.medianBlur(img,5)

def thresholding(img):
  return cv2.threshold(img,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]

img=get_grayscale(img)
img=thresholding(img)
img=remove_noise(img)

print("new version :",ocr_core(img),'alpha')

"""Ici on réalise notre modèle :"""





